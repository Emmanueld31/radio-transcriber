name: Daily Radio Transcription

on:
  schedule:
    - cron: "0 4 * * 1-5"   # 04:00 UTC (~06:00–07:00 Monday to Friday)
    - cron: "0 5 * * 6"   # 05:00 UTC (~07:00–08:00 Saturday)
    - cron: "0 5 * * 0"   # 05:00 UTC (~07:00–08:00 Sunday)
  workflow_dispatch:

concurrency:
  group: radio-transcribe
  cancel-in-progress: false

jobs:
  record-and-transcribe:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Cache Whisper / HF / CTranslate2
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/faster_whisper
            ~/.cache/huggingface
            ~/.cache/ctranslate2
          key: ${{ runner.os }}-fw-${{ hashFiles('requirements.txt', 'transcribe_only.py', 'run_workflow.sh', 'stations.csv') }}
          restore-keys: |
            ${{ runner.os }}-fw-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg coreutils
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure launcher is executable
        run: chmod +x run_workflow.sh

      - name: Record & Transcribe
        env:
          # --- Recording config ---
          DURATION_SECONDS: "1800"       # 30 min capture
          GRACE_SECONDS: "120"           # extra time for late finishers (optional)
          OUTPUT_DIR: "live_output"
          LOG_DIR: "logs"
          STATIONS_FILE: "stations.csv"

          # --- Inference knobs picked up by transcribe_only.py ---
          CT2_CPU_THREADS: "2"           # match 2-core runner
          WHISPER_VAD: "1"               # VAD ON (skip silence/music)
          WHISPER_PROBE_SECONDS: "90"    # probe length
          WHISPER_THRESH_GOOD: "-0.80"   # greedy if >= this
          WHISPER_THRESH_BAD:  "-0.90"   # fallback beam if <
          WHISPER_GREEDY_BEAM: "1"       # greedy path
          WHISPER_FALLBACK_BEAM: "5"     # accuracy rescue
          # WHISPER_MODEL: "small"       # (optional, default in code)

        run: ./run_workflow.sh

      - name: Package outputs
        if: always()
        run: |
          set -euo pipefail
          tar -czf transcripts_eu_radios.tar.gz -C live_output . || true
          tar -czf logs_eu_radios.tar.gz -C logs . || true
          ls -lh *.tar.gz || true

      - name: Encrypt packages
        if: always()
        env:
          ARTIFACT_PASS: ${{ secrets.ARTIFACT_PASS }}
        run: |
          set -euo pipefail
          if [ -f transcripts_eu_radios.tar.gz ]; then
            openssl enc -aes-256-cbc -salt -pbkdf2 \
              -in transcripts_eu_radios.tar.gz -out transcripts_eu_radios.tar.gz.enc \
              -pass env:ARTIFACT_PASS
          fi
          if [ -f logs_eu_radios.tar.gz ]; then
            openssl enc -aes-256-cbc -salt -pbkdf2 \
              -in logs_eu_radios.tar.gz -out logs_eu_radios.tar.gz.enc \
              -pass env:ARTIFACT_PASS
          fi
          ls -lh *.enc || true

      - name: Upload encrypted artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: encrypted-${{ github.run_id }}
          path: |
            transcripts_eu_radios.tar.gz.enc
            logs_eu_radios.tar.gz.enc
          retention-days: 14
          if-no-files-found: warn
